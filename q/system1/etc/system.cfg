export = libPath, dllPath, logDest, logPath, logRotate, logLevel, eventPath

etcPath = ${EC_ETC_PATH}

  # Definition of bin path directory, should point to the component sources location.
binPath = ${EC_SYS_PATH}/bin/ec/components/${EC_COMPONENT_PKG}

  # List of directories with libraries
libPath = ${EC_SYS_PATH}/bin/ec/components/${EC_COMPONENT_PKG}, ${EC_SYS_PATH}/bin/ec/libraries/, ${EC_SYS_PATH}/bin/airq/

  # List of directories with binary libraries
dllPath = ${EC_SYS_PATH}/bin/ec/components/${EC_COMPONENT_PKG}, ${EC_SYS_PATH}/bin/ec/libraries/

  # Definition of data root directory, should contain all data generated by processes
dataPath = ${EC_SYS_PATH}/data/${EC_COMPONENT_ID}

  # Definition of log root directory, should contain logs from all processes within the system
logPath = ${EC_SYS_PATH}/log/${EC_COMPONENT_ID}

  # Path for event files - see qsl/event.q for more details.
eventPath = ${EC_SYS_PATH}/data/shared/events/

#---------------------------------- process ----------------------------------#
  # Base port used by the system, all other ports are relative to it.
  # The basePort variable together with $EC_SYS_PATH path allows easy 
  # creation of second running instance of the entire system on the same machine.
basePort = 17000

  # Delay after start command. 
startWait = 0.1

  # Delay after stop command. 
stopWait = 0.1

  # List of cores that are assigned to the process, can be overwritten on group or component level.
cpuAffinity = 0

#---------------------------------- logging ----------------------------------#
  # Logging level - DEBUG, INFO, WARN, ERROR or FATAL
logLevel = INFO

  # Logging destination - FILE, STDERR, STDOUT
logDest = FILE,STDERR

  # Log rotation time
logRotate = 01:00:00

#---------------------------------- housekeeping -----------------------------#
  # Default housekeeping action for all components.
housekeeping = ()

#---------------------------------- components -------------------------------#
  # Section with the group name, should contain one or more subsections with processes definitions.
  # Subsection should contain definition of components that are part of the group.
  # Subsection headers should contain component id (exported by yak as EC_COMPONENT_ID).
[group:core]

  [[in.sdsFeed]]                # feed reading from the sensor 
    binPath = ${EC_SYS_PATH}/bin/airq/               
    command = "q sdsFeed.q"      # General config field    - command line string to start the q process
    type = q:feed/sdsFeed         
    port = ${basePort} + 9    # General config field    - q process port, based on ${basePort}                     
    memCap = 5000             # General config field    - q process memory cap in MB (-w q option) - here 5000 MB  
    cfg.dst = core.tick       # 'gen' proc config field - server name that should be used for data distribution    
  
  [[core.tick]]               # Component named 'core.tick' (EC_COMPONENT_ID) - distribution of high frequency data
    command = "q tickHF.q"    # General config field    - command line string
    type = q:tickHF/tickHF    # General config field    - q component of type 'tickHF' (EC_COMPONENT_TYPE) 
                              #                           from package 'tickHF' (EC_COMPONENT_PKG) 
    port = ${basePort} + 10   # General config field    - port
    memCap = 5000             # General config field    - q process memory cap in MB (-w q option)
  
  [[core.rdb]]                # Component named 'core.rdb' (EC_COMPONENT_ID) - real-time database               
    command = "q rdb.q"       # General config field    - command line string
    type = q:rdb/rdb          # General config field    - q component of type 'rdb' (EC_COMPONENT_TYPE)
                              #                           from package 'rdb' (EC_COMPONENT_PKG)  
    port = ${basePort} + 11   # General config field    - port 
    memCap = 10000            # General config field    - q process memory cap in MB (-w q option)
    libs = sendair

  [[core.hdb]]                # Component named 'core.hdb' (EC_COMPONENT_ID) - historical database               
    command = "q hdb.q"       # General config field    - command line string
    type = q:hdb/hdb          # General config field    - q component of type 'hdb' (EC_COMPONENT_TYPE) 
                              #                           from package 'hdb' (EC_COMPONENT_PKG)      
    port = ${basePort} + 12   # General config field    - port 
    memCap = 10000            # General config field    - q process memory cap in MB (-w q option)

  [[out.airq]]
    binPath = ${EC_SYS_PATH}/bin/airq/
    command = "q sender.q"
    type = q:sender/sender
    port = ${basePort} + 14
    memCap = 10000
   

#-----------------------------------------------------------------------------#
	
